//
//  print vs println vs NSLog .swift
//  AllInOne_Swift
//
//  Created by MAC7 on 29/05/18.
//  Copyright © 2018 Suraj Pawar. All rights reserved.
//

import Foundation


/*
 
 
 A few differences:
 
 
 *** print vs println: ***
 
 
 The print function prints messages in the Xcode console when debugging apps.
 
 The println is a variation of this that was removed in Swift 2 and is not used any more. If you see old code that is using println, you can now safely replace it with print.
 
 Back in Swift 1.x, print didn't add newline characters at the end of the printed string, whereas  println did. But nowadays, print always adds the newline character at the end of the string, and if you don't want it to do that, supply a terminator parameter of "".
 
 
 
 
 *** NSLog: ***
 
 NSLog is slower;
 
 NSLog adds a timestamp and identifier to the output, whereas print will not;
 
 NSLog statements appear in both the device's console and debugger's console whereas print only appears in the debugger console.
 
 NSLog uses printf-style format strings, e.g.
 
 NSLog("%0.4f", CGFloat.pi)
 that will produce:
 
 
 *********
 
 Effective iOS 10/macOS 10.12, there is a third alternative, os_log, part of the "unified logging" system (see WWDC 2016 video Unified Logging and Activity Tracing).
 
 You must import os.log before using os_log function:
 
 import os.log
 Like NSLog, os_log will output messages to both the Xcode debugging console and the device console, too
 
 You can now control the "subsystem" and "category" fields available in the Console app. For example:
 
 let log = OSLog(subsystem: Bundle.main.bundleIdentifier!, category: "network")
 os_log("url = %@", log: log, url.absoluteString)
 When you observe the app via the external Console app, you can not only add these columns to the main view, but you can filter on the basis of these. It's very useful when wanting to differentiate your debugging messages from (a) those generated by other subsystems on behalf of your app; or (b) messages from other categories or types.
 
 You can specify different types of logging messages, either .info, .debug, .error, .fault (or .default):
 
 os_log("web service did not respond", type: .error)
 So, if using the external Console app, you can choose to only see messages of certain categories (e.g. only show debugging messages if you choose "Include Debug Messages" on the Console "Action" menu). These settings also dictate many subtle issues details about whether things are logged to disk or not. See WWDC video for more details.
 
 You cannot use string interpolation when using os_log. For example you cannot do:
 
 os_log("foo \(url.absoluteString)")
 You would have to do:
 
 os_log("url = %@", url.absoluteString)
 One of the reasons for the above limitation is to support data privacy. Primitive data types (e.g. numbers) are public by default and objects (e.g. strings) are private by default. In the previous example where you logged the URL, if the app were invoked from the device itself and you were watching from your Mac's Console app, you'd see:
 
 url = <private>
 
 If you wanted to see it from external device, you'd have to do:
 
 os_log("url = %{public}@", url.absoluteString)
 Note, NSLog now uses the unified notification system behind the scenes, but with the following caveats:
 
 You cannot control the subsystem or category or log type;
 
 It does not support privacy settings.
 
 Bottom line, print is sufficient for simple tasks, but NSLog is useful because it includes timestamp information for you.
 
 The power of os_log comes into stark relief when debugging iOS apps that have to be tested outside of Xcode. For example, when testing background iOS app processes like background fetch, being connected to the Xcode debugger changes the app lifecycle. So, you frequently will want to test on physical device, running app from device itself, not starting the app from Xcode’s debugger. Unified logging let’s you still watch your iOS device os_log statements from the macOS Console app.
 
 */



/* *** print and debugPrint Example ***
 
 If You make a network call and do a debugPrint(response) instead of print(response), you will get a lot more valuable information. See the below example code:
 
 
 Sample Code : Using iTunes Search Api
 
 
 let urlReq = URLRequest(url: URL(string: "https://itunes.apple.com/search?term=jack+johnson&limit=1")!)
 
 Alamofire.request(urlReq).responseJSON { (data) in
 print(data)
 print("\n\n\n\n\n\n\n\n\n")
 debugPrint(data)
 }
 
 
 
 Console Output (Removing some of the response fields)
 
 *** For print ***
 
 SUCCESS: {
 resultCount = 1;
 results =     (
 {
 artistId = 909253;
 artistName = "Jack Johnson";
 artistViewUrl = "https://itunes.apple.com/us/artist/jack-johnson/id909253?uo=4";
 }
 );
 }
 
 
 
 *** For debugPrint ***
 
 [Request]: GET https://itunes.apple.com/search?term=jack+johnson&limit=1
 [Response]: <NSHTTPURLResponse: 0x610000223860> { URL: https://itunes.apple.com/search?term=jack+johnson&limit=1 } { status code: 200, headers {
 "Access-Control-Allow-Origin" = "*";
 "Cache-Control" = "max-age=86345";
 Connection = "keep-alive";
 "Content-Disposition" = "attachment; filename=1.txt";
 "Content-Length" = 1783;
 "Content-Type" = "text/javascript; charset=utf-8";
 Date = "Sat, 23 Sep 2017 14:29:11 GMT";
 "Strict-Transport-Security" = "max-age=31536000";
 Vary = "Accept-Encoding";
 "X-Apple-Partner" = "origin.0";
 "X-Cache" = "TCP_MISS from a23-76-156-143.deploy.akamaitechnologies.com (AkamaiGHost/9.1.0.4-20866905) (-)";
 "X-Cache-Remote" = "TCP_MISS from a23-45-232-92.deploy.akamaitechnologies.com (AkamaiGHost/9.1.0.4-20866905) (-)";
 "X-True-Cache-Key" = "/L/itunes.apple.com/search ci2=limit=1&term=jack+johnson__";
 "apple-originating-system" = MZStoreServices;
 "apple-seq" = 0;
 "apple-timing-app" = "86 ms";
 "apple-tk" = false;
 "x-apple-application-instance" = 1000492;
 "x-apple-application-site" = NWK;
 "x-apple-jingle-correlation-key" = VEF3J3UWCHKUSGPHDZRI6RB2QY;
 "x-apple-orig-url" = "https://itunes.apple.com/search?term=jack+johnson&limit=1";
 "x-apple-request-uuid" = "a90bb4ee-9611-d549-19e7-1e628f443a86";
 "x-apple-translated-wo-url" = "/WebObjects/MZStoreServices.woa/ws/wsSearch?term=jack+johnson&limit=1&urlDesc=";
 "x-content-type-options" = nosniff;
 "x-webobjects-loadaverage" = 0;
 } }
 [Data]: 1783 bytes
 [Result]: SUCCESS: {
 resultCount = 1;
 results =     (
 {
 artistId = 909253;
 artistName = "Jack Johnson";
 artistViewUrl = "https://itunes.apple.com/us/artist/jack-johnson/id909253?uo=4";
 }
 );
 }
 
 [Timeline]: Timeline:
 
 {
 "Request Start Time": 527869893.013,
 "Initial Response Time": 527869893.033,
 "Request Completed Time": 527869893.034,
 "Serialization Completed Time": 527869893.035,
 "Latency": 0.020secs,
 "Request Duration": 0.021secs,
 "Serialization Duration": 0.001secs,
 "Total Duration": 0.021secs
 }
 
 */


